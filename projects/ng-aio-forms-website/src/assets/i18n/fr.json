{
  "appTitle": "NG AIO FORMS",
  "Footer": "",
  "Header": "",
  "Submit": "Valider",
  "Back": "Retour",
  "Cancel": "Annuler",
  "Read": "Lire",
  "Accept": "Accepter",
  "Refuse": "Refuser",
  "Home": "Accueil",
  "About": "A propos",
  "Doc": "Documentation",
  "Examples": {},
  "Play": "Jouer",
  "intro": {
    "manage": "Gérer simplement des formulaires complexes a l'aide de NgAioForms",
    "dontWrite": "N'écrivez plus <input [(ngModel)]=\"value\"/>",
    "tryExemple": "Exemple custom si dessous, essayez le !"
  },
  "question": {
    "withAntularForm": "Can i use it with FormControl ?",
    "howCanIUseIt": "How can i use it ?",
    "isItReative": "Yeah, you can try and edit the json below, the form will follow change !"
  },
  "respond": {
    "withAntularForm": "Yeah, he already use it ! You also can use AsyncFormControl ;)"
  },
  "features": {
    "title": "CARACTÉRISTIQUES",
    "useJSON": "Utilisez un simple JSON en entrée.",
    "15Themes": "15 Thèmes prêts à être utilisés.",
    "customFeedBacks": "Feedbacks personnalisés simple à fournir.",
    "grids": "Utilisation du <a href='https://getbootstrap.com/docs/4.0/layout/grid/'>Bootstrap Grid System</a> pour combiner les champs.",
    "events": "3 événements à écouter  (onChange, onCreate, onSubmit).",
    "controls": "Utilisation du <a href='https://angular.io/guide/reactive-forms'>FormControl</a> pour les validations personnalisées.",
    "listens": "Écoute simple des anciennes et des nouvelles valeurs.",
    "typed": "Typé pour l'auto-complétion vscode.",
    "debug": "Debug mode fournit.",
    "collision": "Pas de collision en cas de plusieurs formulaires.",
    "noDep":"Aucune dépendance tiers. (Ok il y a Angular et Tslib, mais bon...)"
  },
  "version": "Version"
}
